<div class="form-group">
    <label for="Title">Title</label>
    <InputText @bind-Value="@Book.Title" class="form-control"/>
</div>
<div class="form-group">
    <label for="Description">Description</label>
    <InputText @bind-Value="@Book.Description" class="form-control"/>

</div>
<div class="form-group ">
<label for="Authors" class="m-3">Authors: </label>
@{
    int i = 0;
    foreach(var author in Book.Authors)
    {      
        i++;
        author.Id = i;
        <div class="d-flex justify-content-between">
                      
                <InputText @bind-Value="@author.AuthorName" class="form-control p-1"/>
          
            <button @onclick="@(()=>Book.Authors.Remove(author))" class="btn btn-outline-danger p-1 mx-2">remove Author</button>
        </div>
       
    }
   
}
    <button @onclick="@(()=>Book.Authors.Add(new Author()))" class="btn btn-outline-info mt-3">Add Author</button>
</div>
<button class=" mt-3 btn btn-success" @onclick="@(isEditing ? UpdateBook : SaveBook)">
    @if (isEditing)
    {
        <p>Save Edit</p>
    }
    else
    {
        <p>Save Book</p>
    }
</button>

@code {
    private bool isEditing = false;
    public BookDto Book = new BookDto()
    {
        Id= Guid.NewGuid()
    };


    [Parameter ]
    public EventCallback<BookDto> AddNewBook { get; set; }

    [Parameter] 
    public EventCallback<BookDto> EditBook { get; set; }
    [Parameter]
    public BookDto? BookEdit
    {
        get => Book;
        set
        {
            Book = value;
            isEditing = value != null;
        }
    }

    public async Task UpdateBook()
    {
        await EditBook.InvokeAsync(Book);
        Book = new BookDto();
    }

    public async Task SaveBook()
    {
        await AddNewBook.InvokeAsync(Book);
        Book = new BookDto();
    }
  

}
